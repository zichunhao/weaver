### use `&`, `|`, `~` for logical operations on numpy arrays
### can use functions from `math`, `np` (numpy), and `awkward` in the expression

## Note: hww has fake fj_isQCD=1.. However in below selection we do not select label_H_wwunmatch in training pool
selection:
    ### use `&`, `|`, `~` for logical operations on numpy arrays
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    >
    np.squeeze((fj_pt>300) &
    (fj_pt<2500) &
    (np.absolute(fj_eta)<2.4) &
    (fj_msoftdrop>=30) &
    (fj_msoftdrop<320) &
    ( ( ( (fj_isQCDb==1) |
          (fj_isQCDbb==1) |
          (fj_isQCDc==1) |
          (fj_isQCDcc==1) |
          # (fj_isQCDlep == 1) |
          (fj_isQCDothers == True) ) &
        (fj_genRes_mass<=0) ) |
      ( (fj_H_VV_4q==1) &
        # (fj_maxdR_HVV_daus<2.5) &
        (fj_nprongs>1) &
        (fj_genRes_mass>0) ) ))

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    fj_H_VV_4q_3q: (fj_H_VV_4q==1) & (fj_nprongs==3)
    fj_H_VV_4q_4q: (fj_H_VV_4q==1) & (fj_nprongs==4)
    fj_isQCDreal: (fj_isQCDb==1) | (fj_isQCDbb==1) | (fj_isQCDc==1) | (fj_isQCDcc==1) | (fj_isQCDothers==1)
    target_mass: np.maximum(1, np.where(fj_genRes_mass>0, fj_genRes_mass, fj_msoftdrop))

preprocess:
    ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
    method: manual
    ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
    data_fraction:

inputs:
    pf_points:
        length: 100
        vars:
            - pfcand_etarel
            - pfcand_phirel
    pf_features:
        length: 100
        vars:
            ### [format 1]: var_name (no transformation)
            ### [format 2]: [var_name,
            ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto),
            ###              multiply_by(optional, default=1),
            ###              clip_min(optional, default=-5),
            ###              clip_max(optional, default=5),
            ###              pad_value(optional, default=0)]
            - [pfcand_pt_log_nopuppi, 1, 0.5]
            - [pfcand_e_log_nopuppi, 1.3, 0.5]
            - pfcand_etarel
            - pfcand_phirel
            - [pfcand_abseta, 0.6, 1.6]
            - pfcand_charge
            - [pfcand_VTX_ass, 4, 0.3]
            - pfcand_lostInnerHits
            - [pfcand_normchi2, 5, 0.2]
            - [pfcand_quality, 0, 0.2]
            - [pfcand_dz, 0, 180]
            - [pfcand_dzsig, 0, 0.9]
            - [pfcand_dxy, 0.0, 300]
            - [pfcand_dxysig, 0, 1.0]
            - [pfcand_btagEtaRel, 1.5, 0.5]
            - [pfcand_btagPtRatio, 0, 1]
            - [pfcand_btagPParRatio, 0, 1]
            - [pfcand_btagSip3dVal, 0, 100]
            - [pfcand_btagSip3dSig, 0, 0.5]
            - [pfcand_btagJetDistVal, 0, 40]
    pf_mask:
        length: 100
        vars:
            - pfcand_mask
    sv_points:
        length: 10
        vars:
            - sv_etarel
            - sv_phirel
    sv_features:
        length: 10
        vars:
            - [sv_pt_log, 4, 0.6]
            - [sv_mass, 1.2, 0.3]
            - sv_etarel
            - sv_phirel
            - [sv_abseta, 0.5, 1.6]
            - [sv_ntracks, 3, 1]
            - [sv_normchi2, 0.8, 0.6]
            - [sv_dxy, 0.4, 0.25]
            - [sv_dxysig, 7, 0.02]
            - [sv_d3d, 0.5, 0.2]
            - [sv_d3dsig, 7, 0.02]
    sv_mask:
        length: 10
        vars:
            - sv_mask

labels:
    ### type can be `simple`, `custom`
    ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
    type: simple
    value:
        [
            fj_H_VV_4q_4q,
            fj_H_VV_4q_3q,
            fj_H_VV_elenuqq,
            fj_H_VV_munuqq,
            fj_H_VV_taunuqq,
            fj_H_VV_taunuqq,
            fj_H_VV_taunuqq,
            fj_isQCDb, fj_isQCDbb, fj_isQCDc, fj_isQCDcc, fj_isQCDothers,
        ]
    ### [option 2] otherwise use `custom` to define the label, then `value` is a map
    ## type: custom
    ## value:
    # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass)

observers:
   - fj_pt
   - fj_eta
   - fj_phi
   - fj_mass
   - fj_msoftdrop
   # - fj_deepTagMD_H4qvsQCD
   # - fj_deepTag_HvsQCD
   - fj_dR_V
   - fj_dR_Vstar
   - fj_PN_H4qvsQCD
   # - fj_mindR_HVV_daus
   # - fj_maxdR_HVV_daus
   - fj_genRes_mass
   - fj_genVstar_mass
   - fj_genV_pt
   - fj_genVstar_pt
   # - fj_genV_decay
   # - fj_genVstar_decay
   - fj_nprongs
   - fj_H_VV_4q
   - target_mass
